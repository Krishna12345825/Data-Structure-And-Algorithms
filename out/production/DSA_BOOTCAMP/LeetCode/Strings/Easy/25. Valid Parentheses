
https://leetcode.com/problems/valid-parentheses/

/*
20. Valid Parentheses

Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.

An input string is valid if:
Open brackets must be closed by the same type of brackets.
Open brackets must be closed in the correct order.
Every close bracket has a corresponding open bracket of the same type.

Example 1:
Input: s = "()"
Output: true

Example 2:
Input: s = "()[]{}"
Output: true

Example 3:
Input: s = "(]"
Output: false

Constraints:
1 <= s.length <= 104
s consists of parentheses only '()[]{}'.
*/


class Solution {
    public boolean isValid(String s) {
           Stack<Character> stack = new Stack<Character>();
        for (char c : s.toCharArray()) {
            if (c == '(' || c == '{' || c == '[') {
                stack.push(c);
            } else if (c == ')' || c == '}' || c == ']') {
                if (stack.isEmpty()) {
                    return false;
                }
                char top = stack.pop();

                if ((c == ')' && top != '(') || (c == '}' && top != '{') || (c == ']' && top != '[')) {
                    return false;
                }
            }
        }
        return stack.isEmpty();
    }
}



1. Create an empty stack to keep track of the opening brackets.
2. Iterate through each character in the input string.
3. If the character is an opening bracket ('(', '{', '['), push it onto the stack.
4. If the character is a closing bracket (')', '}', ']'), check if the stack is empty. If it is, return false as there are no opening brackets to match the current closing bracket. If the stack is not empty, pop the top of the stack and compare it with the current closing bracket. If they are not of the same type, return false.
5. After iterating through all the characters, check if the stack is empty. If it is, return true as all the opening brackets have corresponding closing brackets. If the stack is not empty, return false.