https://leetcode.com/problems/decrypt-string-from-alphabet-to-integer-mapping/

/*
1309. Decrypt String from Alphabet to Integer Mapping

You are given a string s formed by digits and '#'. We want to map s to English lowercase characters as follows:
Characters ('a' to 'i') are represented by ('1' to '9') respectively.
Characters ('j' to 'z') are represented by ('10#' to '26#') respectively.
Return the string formed after mapping.

The test cases are generated so that a unique mapping will always exist.

Example 1:
Input: s = "10#11#12"
Output: "jkab"
Explanation: "j" -> "10#" , "k" -> "11#" , "a" -> "1" , "b" -> "2".

Example 2:
Input: s = "1326#"
Output: "acz"

Constraints:
1 <= s.length <= 1000
s consists of digits and the '#' letter.
s will be a valid string such that mapping is always possible.
*/

class Solution {
    public String freqAlphabets(String s) {
        StringBuilder decrypted = new StringBuilder();
    int n = s.length();

    for (int i = 0; i < n; i++) {
        if (i + 2 < n && s.charAt(i + 2) == '#') {
            int num = Integer.parseInt(s.substring(i, i + 2));
            char ch = (char) ('a' + num - 1);
            decrypted.append(ch);
            i += 2; // skip the two characters processed
        } else {
            char ch = (char) ('a' + (s.charAt(i) - '1'));
            decrypted.append(ch);
        }
    }
    return decrypted.toString();
    }
}




1. Create a StringBuilder to store the decrypted string.
2. Iterate through each character in the input string.
3. Check if the current character is '#'. If it is, it means that the current character is part of a double-digit number.
   - Take the substring of the two previous characters and convert it to an integer.
   - Map the integer to the corresponding lowercase letter (e.g., '1' maps to 'a', '2' maps to 'b', etc.).
   - Append the mapped lowercase letter to the StringBuilder.
   - Move the index two positions ahead to skip the processed double-digit character.
4. If the current character is not '#', it means that it represents a single-digit number.
   - Map the current character to the corresponding lowercase letter (e.g., '1' maps to 'a', '2' maps to 'b', etc.).
   - Append the mapped lowercase letter to the StringBuilder.
5. Return the decrypted string as a result.