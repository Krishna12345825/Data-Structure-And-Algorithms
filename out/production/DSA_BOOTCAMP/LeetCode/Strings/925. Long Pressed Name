https://leetcode.com/problems/long-pressed-name/
/*
925. Long Pressed Name

Your friend is typing his name into a keyboard. Sometimes, when typing a character c, the key might get long pressed, and the character will be typed 1 or more times.
You examine the typed characters of the keyboard. Return True if it is possible that it was your friends name, with some characters (possibly none) being long pressed.

Example 1:
Input: name = "alex", typed = "aaleex"
Output: true
Explanation: 'a' and 'e' in 'alex' were long pressed.

Example 2:
Input: name = "saeed", typed = "ssaaedd"
Output: false
Explanation: 'e' must have been pressed twice, but it was not in the typed output.

Constraints:
1 <= name.length, typed.length <= 1000
name and typed consist of only lowercase English letters.
*/


class Solution {
    public boolean isLongPressedName(String name, String typed) {
        int i = 0;
        int j = 0;
        while (i < name.length() && j < typed.length()) {
            if (name.charAt(i) == typed.charAt(j)) {
                i++;
                j++;
            } else if (j > 0 && typed.charAt(j) == typed.charAt(j - 1)) {
                j++;
            } else {
                return false;
            }
        }
        if (i != name.length()) {
            return false;
        }
        while (j < typed.length()) {
            if (typed.charAt(j) != typed.charAt(j - 1)) {
                return false;
            }
            j++;
        }
        return true;
    }
}




1. Initialize two pointers, i and j, to iterate over the name and typed strings, respectively.
2. Iterate over both strings simultaneously, comparing each character along the way.
3. If the characters at name[i] and typed[j] are equal, increment both pointers i and j.
4. If the characters at name[i] and typed[j] are not equal, but the character at typed[j] is equal to the previous character in typed, increment only j to skip the long-pressed keys.
5. If the characters at name[i] and typed[j] are not equal and typed[j] is not equal to the previous character in typed, return false as this means the names cannot be formed by long pressing.
6. Finally, check if both pointers have reached the end of their respective strings. If they have, return true. Otherwise, return false.