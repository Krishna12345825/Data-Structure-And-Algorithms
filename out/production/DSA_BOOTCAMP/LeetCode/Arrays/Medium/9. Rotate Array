
https://leetcode.com/problems/rotate-array/description/

/*
189. Rotate Array

Given an integer array nums, rotate the array to the right by k steps, where k is non-negative.

Example 1:
Input: nums = [1,2,3,4,5,6,7], k = 3
Output: [5,6,7,1,2,3,4]
Explanation:
rotate 1 steps to the right: [7,1,2,3,4,5,6]
rotate 2 steps to the right: [6,7,1,2,3,4,5]
rotate 3 steps to the right: [5,6,7,1,2,3,4]

Example 2:
Input: nums = [-1,-100,3,99], k = 2
Output: [3,99,-1,-100]
Explanation:
rotate 1 steps to the right: [99,-1,-100,3]
rotate 2 steps to the right: [3,99,-1,-100]

Constraints:
1 <= nums.length <= 105
-231 <= nums[i] <= 231 - 1
0 <= k <= 105
*/

-------------------------------------------------Approach---------------------------------------------------------------------
1. Reverse the entire array.
2. Reverse the first k elements, where k is the number of steps to rotate.
3. Reverse the remaining elements from k to the end of the array.

Here's the step-by-step algorithm:
1. Check if k is greater than the length of the array. If it is, set k to k % nums.length to ensure that k is within the range of the array length.
2. Reverse the entire array by calling a helper function reverse with parameters nums and 0 as the starting index and nums.length - 1 as the ending index.
3. Reverse the first k elements by calling the helper function reverse with parameters nums and 0 as the starting index and k - 1 as the ending index.
4. Reverse the remaining elements from index k to the end of the array by calling the helper function reverse with parameters nums and k as the starting index and nums.length - 1 as the ending index.
----------------------------------------------------------------------------------------------------------------------------------------------------

class Solution {
    public void rotate(int[] nums, int k) {
      k = k % nums.length;
      reverse(nums, 0, nums.length-1);
      reverse(nums, 0, k - 1);
      reverse(nums, k, nums.length-1);
    }

    void reverse(int nums[], int start, int end){
        while(start < end){
        int temp = nums[start];
        nums[start] = nums[end];
        nums[end] = temp;
        start++;
        end--;
        }
    }
}


