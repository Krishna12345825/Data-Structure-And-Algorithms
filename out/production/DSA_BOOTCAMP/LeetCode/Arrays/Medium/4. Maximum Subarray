
https://leetcode.com/problems/maximum-subarray/description/

/*
53. Maximum Subarray

Given an integer array nums, find the  subarray with the largest sum, and return its sum.

Example 1:
Input: nums = [-2,1,-3,4,-1,2,1,-5,4]
Output: 6
Explanation: The subarray [4,-1,2,1] has the largest sum 6.

Example 2:
Input: nums = [1]
Output: 1
Explanation: The subarray [1] has the largest sum 1.

Example 3:
Input: nums = [5,4,-1,7,8]
Output: 23
Explanation: The subarray [5,4,-1,7,8] has the largest sum 23.

Constraints:
1 <= nums.length <= 105
-104 <= nums[i] <= 104
*/


----------------------Approach---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
1. Initialize two variables maxSum and currentSum, both set to the first element of the nums array.
2. Iterate through the array from the second element.
3. For each element, calculate the currentSum as the maximum of the current element itself or the current element added to the currentSum. This step ensures that we find the maximum possible sum at each index.
4. Update the maxSum as the maximum of the maxSum and the currentSum.
5. After iterating through the entire array, return the maxSum.
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

class Solution {
    public int maxSubArray(int[] nums) {
        int maxSum = nums[0];
        int currentSum = nums[0];
        for(int i=1; i<nums.length; i++){
            currentSum = Math.max(nums[i], currentSum+nums[i]);
            maxSum = Math.max(maxSum, currentSum);
        }
        return maxSum;
    }
}