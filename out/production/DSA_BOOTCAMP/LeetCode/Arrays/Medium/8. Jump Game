
https://leetcode.com/problems/jump-game/description/
/*
55. Jump Game

You are given an integer array nums. You are initially positioned at the array's first index, and each element in the array represents your maximum jump length at that position.
Return true if you can reach the last index, or false otherwise.

Example 1:
Input: nums = [2,3,1,1,4]
Output: true
Explanation: Jump 1 step from index 0 to 1, then 3 steps to the last index.

Example 2:
Input: nums = [3,2,1,0,4]
Output: false
Explanation: You will always arrive at index 3 no matter what. Its maximum jump length is 0, which makes it impossible to reach the last index.

Constraints:
1 <= nums.length <= 104
0 <= nums[i] <= 105
*/

-----------------------------------------------Approach-------------------------------------------------------------------------------------------------------
To solve this problem, we can use a greedy algorithm. We start from the first index and keep track of the maximum index we can reach from each position.
If at any point the maximum index we can reach is less than or equal to the current position, we can't reach the last index.
If the maximum index is greater than or equal to the last index, we can reach the last index.

Here's the step-by-step algorithm:

1. Initialize a variable maxIndex as 0, which represents the maximum index we can reach.
2. Iterate through the array nums from index 0 to n-1.
3. For each index i, check if i is greater than maxIndex. If it is, return false because we can't reach the current index i.
4. Update maxIndex to the maximum of maxIndex and i + nums[i].
5. If maxIndex is greater than or equal to the last index (i.e., nums.length - 1), return true.
6. If the loop completes without returning true, return false.
----------------------------------------------------------------------------------------------------------------------------------------------------------------------
class Solution {
    public boolean canJump(int[] nums) {
        int n = nums.length;
        int maxIndex = 0;
        for(int i=0; i<n; i++){
            if(i > maxIndex){
                return false;
            }
            maxIndex = Math.max(maxIndex, i+nums[i]);
            if(maxIndex >= n-1){
                return true;
            }
        }
           return false;
    }
}