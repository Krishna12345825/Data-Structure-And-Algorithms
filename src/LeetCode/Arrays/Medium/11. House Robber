

/*
198. House Robber

You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed, the only constraint stopping you from robbing each of them is that adjacent houses have security systems connected and it will automatically contact the police if two adjacent houses were broken into on the same night.
Given an integer array nums representing the amount of money of each house, return the maximum amount of money you can rob tonight without alerting the police.

Example 1:
Input: nums = [1,2,3,1]
Output: 4
Explanation: Rob house 1 (money = 1) and then rob house 3 (money = 3).
Total amount you can rob = 1 + 3 = 4.

Example 2:
Input: nums = [2,7,9,3,1]
Output: 12
Explanation: Rob house 1 (money = 2), rob house 3 (money = 9) and rob house 5 (money = 1).
Total amount you can rob = 2 + 9 + 1 = 12.

Constraints:
1 <= nums.length <= 100
0 <= nums[i] <= 400
*/

--------------------------------------------------Approach---------------------------------------------------
1. Create an array maxAmounts of size nums.length + 1 to store the maximum amount of money that can be robbed at each house. Initialize the first two indices with 0 and nums[0], since there are no previous houses to consider.
2. Iterate from index 2 to nums.length, and for each house:
         - Calculate the amount that can be robbed if this house is chosen, which is the current house's money (nums[i]) plus the maximum amount that could be robbed from two houses before (maxAmounts[i - 2]).
         - Calculate the amount that can be robbed if this house is not chosen, which is the maximum amount that could be robbed from the previous house (maxAmounts[i - 1]).
         - Store the maximum of the two values in maxAmounts[i].
3. After the loop, return maxAmounts[nums.length] which represents the maximum amount of money that can be robbed from all houses.
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

class Solution {
    public int rob(int[] nums) {
        if (nums.length == 0) {
        return 0;
    }
    int[] maxAmounts = new int[nums.length + 1];
    maxAmounts[1] = nums[0];
    for (int i = 2; i <= nums.length; i++) {
        maxAmounts[i] = Math.max(nums[i - 1] + maxAmounts[i - 2], maxAmounts[i - 1]);
    }
    return maxAmounts[nums.length];
    }
}