
https://leetcode.com/problems/spiral-matrix/description/

/*
54. Spiral Matrix

Given an m x n matrix, return all elements of the matrix in spiral order.

Example 1:
Input: matrix = [[1,2,3],[4,5,6],[7,8,9]]
Output: [1,2,3,6,9,8,7,4,5]

Example 2:
Input: matrix = [[1,2,3,4],[5,6,7,8],[9,10,11,12]]
Output: [1,2,3,4,8,12,11,10,9,5,6,7]

Constraints:
m == matrix.length
n == matrix[i].length
1 <= m, n <= 10
-100 <= matrix[i][j] <= 100
*/

------Approach--------------------------------------------------------------------------------------------------------------------------------------------------------------
1. Initialize four variables: top, bottom, left, and right to keep track of the boundaries of the matrix.
2. Initialize an empty list to store the elements in the spiral order.
3. Start a while loop as long as the top boundary is less than or equal to the bottom boundary and the left boundary is less than or equal to the right boundary.
4. Traverse the top row from the left boundary to the right boundary and append each element to the result list. Then increment the top boundary.
5. Traverse the right column from the top boundary to the bottom boundary and append each element to the result list. Then decrement the right boundary.
6. Check if the top boundary is less than or equal to the bottom boundary and if the left boundary is less than or equal to the right boundary.
7. If true, traverse the bottom row from the right boundary to the left boundary and append each element to the result list. Then decrement the bottom boundary.
8. If true, traverse the left column from the bottom boundary to the top boundary and append each element to the result list. Then increment the left boundary.
9. Finally, return the result list.

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

class Solution {
    public List<Integer> spiralOrder(int[][] matrix) {
        List<Integer> result =  new ArrayList<>();
        if(matrix.length==0 || matrix ==null){
            return result;
        }

        int top = 0;
        int buttom = matrix.length-1;
        int left  = 0;
        int right = matrix[0].length-1;

        while(left<=right && top<=buttom){
            for(int i = left; i<=right; i++){
                // Traverse top row
                result.add(matrix[top][i]);
            }
            top++;

            // Traverse right column
            for(int i = top; i<=buttom; i++){
                result.add(matrix[i][right]);
            }
            right--;

            if(left<=right && top<=buttom){
                // Traverse buttom row
                for(int i=right; i>=left; i--){
                    result.add(matrix[buttom][i]);
                }
                buttom--;

                //Traverse left column
                for(int i=buttom; i>=top; i--){
                    result.add(matrix[i][left]);
                }
                left++;
            }
        }
        return result;
    }
}