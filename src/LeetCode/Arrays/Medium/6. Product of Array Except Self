
https://leetcode.com/problems/product-of-array-except-self/description/

/*
238. Product of Array Except Self

Given an integer array nums, return an array answer such that answer[i] is equal to the product of all the elements of nums except nums[i].
The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.
You must write an algorithm that runs in O(n) time and without using the division operation.

Example 1:
Input: nums = [1,2,3,4]
Output: [24,12,8,6]

Example 2:
Input: nums = [-1,1,0,-3,3]
Output: [0,0,9,0,0]

Constraints:
2 <= nums.length <= 105
-30 <= nums[i] <= 30
The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.
*/

-------------------------------------------------------Approach--------------------------------------------------------------------------------------------
1. Create an output array of the same length as the input array.
2. Initialize the output array elements with 1.
3. Iterate through the input array from left to right and calculate the prefix products. At each index i, update the output array element with the product of all elements before i.
4. Iterate through the input array from right to left and calculate the suffix products. At each index i, update the output array element with the product of all elements after i.
5. The output array will now contain the product of all elements except the element at each index.
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



class Solution {
    public int[] productExceptSelf(int[] nums) {
        int n = nums.length;

        // create the output array
        int[] output = new int[n];

        // initialize the output array elements with 1
        Arrays.fill(output, 1);

        int leftProduct = 1;

        // calculate the prefix products
        for (int i = 0; i < n; i++) {
            output[i] *= leftProduct;
            // update the output with the prefix product
            leftProduct *= nums[i];
            // update the left product
        }

        int rightProduct = 1;

        // calculate the suffix products
        for (int i = n - 1; i >= 0; i--) {
            output[i] *= rightProduct;
             // update the output with the suffix product
            rightProduct *= nums[i];
            // update the right product
        }
        return output;
    }
}
