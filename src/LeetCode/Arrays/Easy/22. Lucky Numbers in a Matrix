
https://leetcode.com/problems/lucky-numbers-in-a-matrix/

/*
1380. Lucky Numbers in a Matrix

Given an m x n matrix of distinct numbers, return all lucky numbers in the matrix in any order.
A lucky number is an element of the matrix such that it is the minimum element in its row and maximum in its column.

Example 1:
Input: matrix = [[3,7,8],[9,11,13],[15,16,17]]
Output: [15]
Explanation: 15 is the only lucky number since it is the minimum in its row and the maximum in its column.

Example 2:
Input: matrix = [[1,10,4,2],[9,3,8,7],[15,16,17,12]]
Output: [12]
Explanation: 12 is the only lucky number since it is the minimum in its row and the maximum in its column.

Example 3:
Input: matrix = [[7,8],[1,2]]
Output: [7]
Explanation: 7 is the only lucky number since it is the minimum in its row and the maximum in its column.

Constraints:
m == mat.length
n == mat[i].length
1 <= n, m <= 50
1 <= matrix[i][j] <= 105.
All elements in the matrix are distinct.
*/

class Solution {
    public List<Integer> luckyNumbers (int[][] matrix) {
    Set<Integer> minRow = new HashSet<>();
    Set<Integer> maxCol = new HashSet<>();
    int rows = matrix.length;
    int cols = matrix[0].length;
    for (int i = 0; i < rows; i++) {
        int minVal = Integer.MAX_VALUE;
        for (int j = 0; j < cols; j++) {
            minVal = Math.min(minVal, matrix[i][j]);
        }
        minRow.add(minVal);
    }
    for (int j = 0; j < cols; j++) {
        int maxVal = Integer.MIN_VALUE;
        for (int i = 0; i < rows; i++) {
            maxVal = Math.max(maxVal, matrix[i][j]);
        }
        maxCol.add(maxVal);
    }
    List<Integer> result = new ArrayList<>(minRow);
    result.retainAll(maxCol);
    return result;
    }
}




1. Initialize two empty sets, minRow and maxCol.
2. Loop through each row in the matrix.
3. Find the minimum element in the current row and store its value in a variable minVal.
4. Add the minVal to the minRow set.
5. Loop through each element in the current row, and if the element is equal to minVal, add its column index to the maxCol set.
6. After iterating through all the rows, find the intersection between the minRow set and the maxCol set, which will give us the lucky numbers.
7. Convert the intersection set to an array and return it.