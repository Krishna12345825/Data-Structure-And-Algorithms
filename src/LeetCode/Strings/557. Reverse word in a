
https://leetcode.com/problems/reverse-words-in-a-string-iii/

/*
557. Reverse Words in a String III

Given a string s, reverse the order of characters in each word within a sentence while still preserving whitespace and initial word order.

Example 1:
Input: s = "Let's take LeetCode contest"
Output: "s'teL ekat edoCteeL tsetnoc"

Example 2:
Input: s = "God Ding"
Output: "doG gniD"

Constraints:
1 <= s.length <= 5 * 104
s contains printable ASCII characters.
s does not contain any leading or trailing spaces.
There is at least one word in s.
All the words in s are separated by a single space.
*/

class Solution {
    public String reverseWords(String s) {
        String []words = s.split("\\s+");
        StringBuilder sb = new StringBuilder();
        for(int i=0; i<words.length; i++){
            String word = words[i];
        for(int j=word.length()-1; j>=0; j--){
            sb.append(word.charAt(j));
        }
        if(i < words.length-1){
            sb.append(" ");
        }
     }
       return sb.toString();
    }

}



1. Split the input string into an array of words using whitespace as the delimiter.
2. Create a StringBuilder to store the reversed words.
3. Iterate through each word in the array.
4. For each word, reverse its characters by iterating from the last index to the first index.
5. Append the reversed word to the StringBuilder.
6. If it's not the last word, append a whitespace to the StringBuilder.
7. After iterating through all the words, convert the StringBuilder to a string and return it.