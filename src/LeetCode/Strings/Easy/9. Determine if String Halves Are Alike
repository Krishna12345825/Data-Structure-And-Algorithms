https://leetcode.com/problems/determine-if-string-halves-are-alike/description/

/*
1704. Determine if String Halves Are Alike

You are given a string s of even length. Split this string into two halves of equal lengths, and let a be the first half and b be the second half.
Two strings are alike if they have the same number of vowels ('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'). Notice that s contains uppercase and lowercase letters.
Return true if a and b are alike. Otherwise, return false.

Example 1:
Input: s = "book"
Output: true
Explanation: a = "bo" and b = "ok". a has 1 vowel and b has 1 vowel. Therefore, they are alike.

Example 2:
Input: s = "textbook"
Output: false
Explanation: a = "text" and b = "book". a has 1 vowel whereas b has 2. Therefore, they are not alike.
Notice that the vowel o is counted twice.

Constraints:
2 <= s.length <= 1000
s.length is even.
s consists of uppercase and lowercase letters
*/


class Solution {
    public boolean halvesAreAlike(String s) {
        int length = s.length();
        int half= length/2;
        int count1 = 0;
        int count2 = 0;
        for(int i=0; i< half; i++){
            if(isVowel(s.charAt(i))){
                count1++;
            }
        }
        for(int i=half; i<length; i++){
            if(isVowel(s.charAt(i))){
                count2++;
            }
        }
        return count1 == count2;
    }

    public boolean isVowel(char c){
        c= Character.toLowerCase(c);
        return c=='a' || c=='e' || c=='i' || c=='o' || c=='u';
    }
}



1. Create a helper function isVowel that checks whether a given character is a vowel.
2. Split the input string into two halves by dividing it into two equal parts. If the length of the string is odd, ignore the middle character.
3. Initialize two variables count1 and count2 to keep track of the number of vowels in the first and second halves, respectively.
4. Iterate through the characters in the first half of the string. If a character is a vowel (using the isVowel helper function), increment count1.
5. Iterate through the characters in the second half of the string. If a character is a vowel (using the isVowel helper function), increment count2.
6. If count1 and count2 are equal, return true; otherwise, return false.