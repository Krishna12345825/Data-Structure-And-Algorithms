
https://leetcode.com/problems/valid-palindrome-ii/description/

/*
680. Valid Palindrome II

Given a string s, return true if the s can be palindrome after deleting at most one character from it.

Example 1:
Input: s = "aba"
Output: true

Example 2:
Input: s = "abca"
Output: true
Explanation: You could delete the character 'c'.

Example 3:
Input: s = "abc"
Output: false

Constraints:
1 <= s.length <= 105
s consists of lowercase English letters
*/

class Solution {
    public boolean validPalindrome(String s) {
        int left = 0;
        int right = s.length() - 1;
        while (left <= right) {
            if (s.charAt(left) != s.charAt(right)) {
                return isPalindrome(s, left + 1, right) || isPalindrome(s, left, right - 1);
            }
            left++;
            right--;
        }
        return true;
    }

    private boolean isPalindrome(String s, int left, int right) {
        while (left <= right) {
            if (s.charAt(left) != s.charAt(right)) {
                return false;
            }
            left++;
            right--;
        }
        return true;
    }
}



1. Initialize two pointers, left and right, pointing to the start and end of the string, respectively.
2. While left is less than or equal to right:
     - If the characters at left and right are not equal:
     - Create two separate substrings by excluding the character at left and the character at right, and check if any of the two resulting substrings is a palindrome.
     - If either of the substrings is a palindrome, return true.
     - Otherwise, return false.
     - Increment left and decrement right.
3. If the loop completes without returning true, it means that the string is a palindrome after deleting at most one character. Return true.