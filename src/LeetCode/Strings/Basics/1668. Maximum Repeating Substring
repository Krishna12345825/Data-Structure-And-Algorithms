
https://leetcode.com/problems/maximum-repeating-substring/description/

/*
1668. Maximum Repeating Substring

For a string sequence, a string word is k-repeating if word concatenated k times is a substring of sequence. The word's maximum k-repeating value is the highest value k where word is k-repeating in sequence. If word is not a substring of sequence, word's maximum k-repeating value is 0.
Given strings sequence and word, return the maximum k-repeating value of word in sequence.

Example 1:
Input: sequence = "ababc", word = "ab"
Output: 2
Explanation: "abab" is a substring in "ababc".

Example 2:
Input: sequence = "ababc", word = "ba"
Output: 1
Explanation: "ba" is a substring in "ababc". "baba" is not a substring in "ababc".

Example 3:
Input: sequence = "ababc", word = "ac"
Output: 0
Explanation: "ac" is not a substring in "ababc".

Constraints:
1 <= sequence.length <= 100
1 <= word.length <= 100
sequence and word contains only lowercase English letters
*/


public class Solution {
    public int maxRepeating(String sequence, String word) {
        // int maxRepeatingValue = 0;
        // int wordLength = word.length();
        // for (int i = 0; i <= sequence.length() - wordLength; i++) {
        //     String substring = sequence.substring(i, i + wordLength);
        //     int k = 1;
        //     while (substring.equals(word.repeat(k))) {
        //         //checking if substring equals word repeated k times
        //         maxRepeatingValue = Math.max(maxRepeatingValue, k);
        //         k++;
        //     }
        // }
        // return maxRepeatingValue;


        int c=0;
        String add=word;
        while(sequence.contains(word)==true)
        {
            c+=1;
            word=word+add;
            //System.out.println(word);
        }
        return c;
    }
}


The maxRepeating method takes in sequence and word as input and returns the maximum k-repeating value
 of the word in the sequence. It iterates through the sequence and checks if the substring starting from
 each position is equal to the word repeated k times. It keeps track of the maximum k-repeating value found so far and returns it at the end